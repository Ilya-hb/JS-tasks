// ## üîπ –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏ (—Ä–∞–∑–º–∏–Ω–∫–∞)

// 1. **–ü–∞–ª–∏–Ω–¥—Ä–æ–º**

// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é isPalindrome(str), –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —á–∏—Ç–∞–µ—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ —Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞.
function isPalindrome(str) {
  const reversedStr = str.split("").reverse().join("");
  return reversedStr === str;
}

isPalindrome("racecar"); // true
isPalindrome("hello"); // false

// 1. **–§–∞–∫—Ç–æ—Ä–∏–∞–ª**

// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é factorial(n), –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç n!

function factorial(n) {
  return n === 1 ? n : n * factorial(n - 1);
}
console.log(factorial(5)); // 120
factorial(5); // 120

// 1. **–ü–æ–∏—Å–∫ —Å–∞–º–æ–≥–æ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞**

// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é longestWord(str), –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –≤ —Å—Ç—Ä–æ–∫–µ.
function longestWord(str) {
  return str
    .split(" ")
    .reduce((acc, el) => (acc.length > el.length ? acc : el), 0);
}
longestWord("I am frontend developer"); // 'developer'

// 1. **–°—É–º–º–∞ —á–∏—Å–µ–ª –≤ –º–∞—Å—Å–∏–≤–µ**

// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é sum(arr), –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É –≤—Å–µ—Ö —á–∏—Å–µ–ª –≤ –º–∞—Å—Å–∏–≤–µ.
function sum(arr) {
  return arr.reduce((acc, el) => acc + el, 0);

  // let result = 0;
  // arr.forEach((el)=>result+=el)
  // return result;
}
sum([1, 2, 3, 4]); // 10

// 1. **–§–∏–∑–±–∞–∑ (FizzBuzz)**

// –í—ã–≤–µ–¥–∏ –æ—Ç 1 –¥–æ 100:
// –ï—Å–ª–∏ —á–∏—Å–ª–æ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ 3 ‚Äî Fizz, –Ω–∞ 5 ‚Äî Buzz, –Ω–∞ 3 –∏ 5 ‚Äî FizzBuzz, –∏–Ω–∞—á–µ —Å–∞–º–æ —á–∏—Å–ª–æ.
function FizzBuzz() {
  for (let i = 1; i <= 100; i++) {
    if (i % 3 === 0) {
      console.log(`${i} - Fizz`);
    } else if (i % 5 === 0) {
      console.log(`${i} - Buzz`);
    } else if (i % 3 === 0 && i % 5 === 0) {
      console.log(`${i} - FizzBuzz`);
    } else console.log(i);
  }
}

FizzBuzz();

// ## üî∏ –°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å

// 1. **–ê–Ω–∞–≥—Ä–∞–º–º–∞**

// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é isAnagram(str1, str2), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è—é—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∏ –∞–Ω–∞–≥—Ä–∞–º–º–∞–º–∏.
function isAnagram(str1, str2) {
  str1result = str1.split("").sort().join("");
  str2result = str2.split("").sort().join("");
  console.log(str2result, str1result);
  return str1result === str2result;
}
isAnagram("listen", "silent"); // true
isAnagram("hello", "world"); // false

// 1. **–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤**

// –£–¥–∞–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–∑ –º–∞—Å—Å–∏–≤–∞ (–≤–µ—Ä–Ω–∏ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤).
function removeDuplicates(arr) {
  return Array.from(new Set(arr));
}
removeDuplicates([1, 2, 2, 3, 4, 4]); // [1,2,3,4]

// 1. **–†–µ–≤–µ—Ä—Å —Å—Ç—Ä–æ–∫–∏ (–±–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ .reverse())**

// –í–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–∫—É –Ω–∞–æ–±–æ—Ä–æ—Ç.
function reverseString(str) {
  let result = [];
  for (let i = str.length - 1; i >= 0; i--) {
    result.push(str.charAt(i));
  }
  return result;
}

reverseString("hello"); // 'olleh'

// ## üî∫ –° –ª–æ–≥–∏–∫–æ–π / –Ω–∞ —Å–æ–±–µ—Å–∞—Ö —á–∞—Å—Ç–æ

// 1. **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤**

// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞ –Ω–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ (–∑–Ω–∞—á–µ–Ω–∏—è –∏ –ø–æ—Ä—è–¥–æ–∫).
function arraysEqual(arr1, arr2) {
  // console.log(arr1.toString() === arr2.toString());
  for (let i = 0; i < arr1.length; i++) {
    if (arr1[i] !== arr2[i]) return false;
  }
  return true;
}
arraysEqual([1, 2, 3], [1, 2, 3]); // true
arraysEqual([1, 2], [2, 1]); // false

// 1. **–ß–∞—Å—Ç–æ—Ç–∞ —Å–∏–º–≤–æ–ª–æ–≤**

// –í–µ—Ä–Ω–∏ –æ–±—ä–µ–∫—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–ª—é—á–∏ ‚Äî —Å–∏–º–≤–æ–ª—ã, –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫–µ.

function charFrequency(str) {
  const uniqueChars = [...new Set(str)].reduce((obj, val) => {
    obj[val] = 0;
    return obj;
  }, {});

  for (char of str) {
    if (char in uniqueChars) {
      uniqueChars[char] += 1;
    }
  }
}
charFrequency("hello");
// { h: 1, e: 1, l: 2, o: 1 }
